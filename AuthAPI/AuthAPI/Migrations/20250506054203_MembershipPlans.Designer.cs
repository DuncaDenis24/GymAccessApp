// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250506054203_MembershipPlans")]
    partial class MembershipPlans
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthAPI.Models.Instructor", b =>
                {
                    b.Property<int>("Instructor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Instructor_Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Instructor_Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("AuthAPI.Models.Membership", b =>
                {
                    b.Property<int>("Membership_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Membership_Id"));

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Membership_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Membership_Id");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("AuthAPI.Models.MembershipPlans", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasInstructor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("MembershipId");

                    b.ToTable("MembershipPlans");

                    b.HasData(
                        new
                        {
                            MembershipId = 1,
                            Access = "Access from 9 AM to 5 PM (Weekdays)",
                            Description = "2 hours/week with Instructor & Free water bottle",
                            HasInstructor = true,
                            Name = "Starter",
                            Price = 30
                        },
                        new
                        {
                            MembershipId = 2,
                            Access = "Access from 6 AM to 10 PM (Weekdays + Sat)",
                            Description = "4 hours/week with Instructor & Water bottle + Gym Towel",
                            HasInstructor = true,
                            Name = "Basic",
                            Price = 40
                        },
                        new
                        {
                            MembershipId = 3,
                            Access = "Full-time Access + Sauna",
                            Description = "6 hours/week with Instructor & T-shirt + Supplements Samples",
                            HasInstructor = true,
                            Name = "Premium",
                            Price = 50
                        },
                        new
                        {
                            MembershipId = 4,
                            Access = "24/7 Access + Sauna + Pool",
                            Description = "8 hours/week with Instructor & Complete Gym Kit",
                            HasInstructor = true,
                            Name = "Pro",
                            Price = 70
                        },
                        new
                        {
                            MembershipId = 5,
                            Access = "VIP Lounge + 24/7 Access + Spa",
                            Description = "Personal Trainer. Included Custom Nutrition Plan + All Gear",
                            HasInstructor = true,
                            Name = "Elite",
                            Price = 99
                        },
                        new
                        {
                            MembershipId = 6,
                            Access = "Access to Pool + Gym (6 AM - 10 PM)",
                            Description = "No instructor. Swim Cap + Water Bottle",
                            HasInstructor = false,
                            Name = "Solo Splash",
                            Price = 20
                        },
                        new
                        {
                            MembershipId = 7,
                            Access = "Full Gym + Yoga Studio (Weekdays + Sat)",
                            Description = "No instructor. Yoga Mat + Relaxation Kit",
                            HasInstructor = false,
                            Name = "Solo Zen",
                            Price = 40
                        },
                        new
                        {
                            MembershipId = 8,
                            Access = "Gym + Sauna + Yoga Studio + Pool (Full-Time Access)",
                            Description = "No instructor. Spa Pass + Premium Locker",
                            HasInstructor = false,
                            Name = "Solo Bliss",
                            Price = 50
                        });
                });

            modelBuilder.Entity("AuthAPI.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Instructor_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Membership_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.HasIndex("Instructor_Id");

                    b.HasIndex("Membership_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthAPI.Models.User", b =>
                {
                    b.HasOne("AuthAPI.Models.Instructor", "Instructor")
                        .WithMany("Users")
                        .HasForeignKey("Instructor_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthAPI.Models.Membership", "Membership")
                        .WithMany("Users")
                        .HasForeignKey("Membership_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Instructor");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("AuthAPI.Models.Instructor", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthAPI.Models.Membership", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
